{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["data","id","nombre","horas","iss","afp","renta","sueldoL","sueldoNeto","App","state","modalActualizar","modalInsertar","form","mostrarModalActualizar","dato","setState","cerrarModalActualizar","mostrarModalInsertar","cerrarModalInsertar","Editar","contador","arreglo","map","registro","eliminar","window","confirm","splice","insertar","valorNuevo","length","lista","push","handleChange","e","target","name","value","console","log","Container","Button","color","onClick","Table","this","prueba","toFixed","Modal","isOpen","ModalHeader","ModalBody","FormGroup","className","readOnly","type","onChange","ModalFooter","editar","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5abd03ed.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {\n  Table,\n  Button,\n  Container,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  FormGroup,\n  ModalFooter,\n} from 'reactstrap';\n\nconst data = [\n{ id: 1, nombre: \"Juan Perez\", horas: 160, iss: 0, afp: 0, renta: 0, sueldoL: 0, sueldoNeto: 0},\n{ id: 2, nombre: \"Mario Ramirez\", horas: 80, iss: 0, afp: 0, renta: 0, sueldoL: 0, sueldoNeto: 0 },\n\n  \n];\n\nclass App extends React.Component{\n\n  state = {\n    data: data,\n    modalActualizar: false,\n    modalInsertar: false,\n    form: {\n      id: \"\",\n      nombre: \"\",\n      horas: \"\",\n      iss: \"\",\n      afp: \"\",\n      renta: \"\",\n      sueldoL: \"\",\n      sueldoNeto: \"\",\n    },\n  };\n\n  mostrarModalActualizar = (dato) => {\n    this.setState({\n      form: dato,\n      modalActualizar: true,\n    });\n  };\n\n  prueba(horas){\n    \n    if(horas<=160){\n      console.log(\"Las horas son menores a 160 horas\");\n      return horas=horas*9.75\n    }if(horas>160&&horas<=200){\n      console.log(\"Las horas son mayores a 160\");\n      return ((horas-160)*11.50)+(160*9.75)  \n    }else{\n      //por que hizo mas horas profe no sabía como hacer :c\n      return horas*12.50\n    }\n  }\n\n  cerrarModalActualizar = () => {\n    this.setState({ modalActualizar: false });\n  };\n\n  mostrarModalInsertar = () => {\n    this.setState({\n      modalInsertar: true,\n    });\n  };\n\n  cerrarModalInsertar = () => {\n    this.setState({ modalInsertar: false });\n  };\n\n  Editar = (dato) => {\n    var contador = 0;\n    var arreglo = this.state.data;\n    arreglo.map((registro) => {\n      if (dato.id == registro.id) {\n        arreglo[contador].nombre = dato.nombre;\n        arreglo[contador].horas = dato.horas;\n        arreglo[contador].iss = dato.iss;\n        arreglo[contador].afp = dato.afp;\n        arreglo[contador].renta = dato.renta;\n        arreglo[contador].sueldoL = dato.sueldoL;\n        arreglo[contador].sueldoNeto = dato.sueldoNeto;\n      }\n      contador++;\n    });\n    this.setState({ data: arreglo, modalActualizar: false });\n  };\n\n  eliminar = (dato) => {\n    var opcion = window.confirm(\"Estás Seguro que deseas Eliminar el elemento \"+dato.id);\n    if (opcion == true) {\n      var contador = 0;\n      var arreglo = this.state.data;\n      arreglo.map((registro) => {\n        if (dato.id == registro.id) {\n          arreglo.splice(contador, 1);\n        }\n        contador++;\n      });\n      this.setState({ data: arreglo, modalActualizar: false });\n    }\n  };\n\n  insertar= ()=>{\n    var valorNuevo= {...this.state.form};\n    valorNuevo.id=this.state.data.length+1;\n    var lista= this.state.data;\n    lista.push(valorNuevo);\n    this.setState({ modalInsertar: false, data: lista });\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      form: {\n        ...this.state.form,\n        [e.target.name]: e.target.value,\n      },\n    });\n  };\n\n  \n  \n\n  render(){\n    return(\n      <>\n      <Container>\n        <br />\n          <Button color=\"success\" onClick={()=>this.mostrarModalInsertar()}>Insertar Nuevo Empleado</Button>\n          <br />\n          <br />\n          <Table>\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>Nombre</th>\n                <th>Horas(por Mes)</th>\n                <th>ISS</th>\n                <th>AFP</th>\n                <th>Renta</th>\n                <th>SueldoL</th>\n                <th>SueldoNeto</th>\n                <th>Acción</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {this.state.data.map((dato) => (\n                <tr key={dato.id}>\n                  <td>{dato.id}</td>\n                  <td>{dato.nombre}</td>\n                  <td>{dato.horas}</td>\n                  <td>${(0.0525*this.prueba(dato.horas)).toFixed(2)}</td>\n                  <td>${(0.0688*this.prueba(dato.horas)).toFixed(2)}</td>\n                  <td>${(0.1*this.prueba(dato.horas)).toFixed(2)}</td>\n                  <td>${(this.prueba(dato.horas)-((0.0525*this.prueba(dato.horas))+(0.0688*this.prueba(dato.horas))+(0.1*this.prueba(dato.horas)))).toFixed(2)}</td>\n                  <td>${(this.prueba(dato.horas)).toFixed(2)}</td>\n                  <td>\n                    <Button\n                      color=\"primary\"\n                      onClick={() => this.mostrarModalActualizar(dato)}\n                    >\n                      Editar\n                    </Button>{\" \"}\n                    <Button color=\"danger\" onClick={()=> this.eliminar(dato)}>Eliminar</Button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </Container>\n\n        <Modal isOpen={this.state.modalActualizar}>\n          <ModalHeader>\n           <div><h3>Editar Registro</h3></div>\n          </ModalHeader>\n\n          <ModalBody>\n            <FormGroup>\n              <label>\n               Id:\n              </label>\n            \n              <input\n                className=\"form-control\"\n                readOnly\n                type=\"text\"\n                value={this.state.form.id}\n              />\n            </FormGroup>\n            \n            <FormGroup>\n              <label>\n                Nombre: \n              </label>\n              <input\n                className=\"form-control\"\n                name=\"nombre\"\n                type=\"text\"\n                onChange={this.handleChange}\n                value={this.state.form.nombre}\n              />\n            </FormGroup>\n            \n            <FormGroup>\n              <label>\n                Horas: \n              </label>\n              <input\n                className=\"form-control\"\n                name=\"horas\"\n                type=\"text\"\n                onChange={this.handleChange}\n                value={this.state.form.horas}\n              />\n            </FormGroup>\n\n            <FormGroup>\n              <label>\n                ISS: \n              </label>\n              <input\n                className=\"form-control\"\n                name=\"iss\"\n                type=\"text\"\n                onChange={this.handleChange}\n                value={this.state.form.iss}\n              />\n            </FormGroup>\n\n            <FormGroup>\n              <label>\n                AFP: \n              </label>\n              <input\n                className=\"form-control\"\n                name=\"afp\"\n                type=\"text\"\n                onChange={this.handleChange}\n                value={this.state.form.afp}\n              />\n            </FormGroup>\n            \n            <FormGroup>\n              <label>\n                Renta: \n              </label>\n              <input\n                className=\"form-control\"\n                name=\"renta\"\n                type=\"text\"\n                onChange={this.handleChange}\n                value={this.state.form.renta}\n              />\n            </FormGroup>\n\n            <FormGroup>\n              <label>\n                SueldoL: \n              </label>\n              <input\n                className=\"form-control\"\n                name=\"sueldoL\"\n                type=\"text\"\n                onChange={this.handleChange}\n                value={this.state.form.sueldoL}\n              />\n            </FormGroup>\n\n            <FormGroup>\n              <label>\n                SueldoNeto: \n              </label>\n              <input\n                className=\"form-control\"\n                name=\"sueldoNeto\"\n                type=\"text\"\n                onChange={this.handleChange}\n                value={this.state.form.sueldoNeto}\n              />\n            </FormGroup>\n\n          </ModalBody>\n\n          <ModalFooter>\n            <Button\n              color=\"primary\"\n              onClick={() => this.editar(this.state.form)}\n            >\n\n              Actualizar\n            </Button>\n            <Button\n              color=\"danger\"\n              onClick={() => this.cerrarModalActualizar()}\n            >\n              Cancelar\n            </Button>\n          </ModalFooter>\n        </Modal>\n\n\n\n        <Modal isOpen={this.state.modalInsertar}>\n          <ModalHeader>\n           <div><h3>Insertar Nuevo empleado</h3></div>\n          </ModalHeader>\n\n          <ModalBody>\n            <FormGroup>\n              <label>\n                Id: \n              </label>\n              \n              <input\n                className=\"form-control\"\n                readOnly\n                type=\"text\"\n                value={this.state.data.length+1}\n              />\n            </FormGroup>\n            \n            <FormGroup>\n              <label>\n                Nombre: \n              </label>\n              <input\n                className=\"form-control\"\n                name=\"nombre\"\n                type=\"text\"\n                onChange={this.handleChange}\n              />\n            </FormGroup>\n            \n            <FormGroup>\n              <label>\n                Horas: \n              </label>\n              <input\n                className=\"form-control\"\n                name=\"horas\"\n                type=\"text\"\n                onChange={this.handleChange}\n              />\n            </FormGroup>\n\n            \n          </ModalBody>\n\n          <ModalFooter>\n            <Button\n              color=\"primary\"\n              onClick={() => this.insertar()}\n            >\n              Insertar\n            </Button>\n            <Button\n              className=\"btn btn-danger\"\n              onClick={() => this.cerrarModalInsertar()}\n            >\n              Cancelar\n            </Button>\n          </ModalFooter>\n        </Modal>\n\n      </>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}